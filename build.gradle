import org.apache.ivy.plugins.resolver.URLResolver

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'gae'
apply plugin: 'gaelyk'
apply plugin: 'eclipse'
apply plugin: 'idea'

def compatibilityVersion = 1.6
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

buildscript {
    ext.set('gitHub', {
        def resolver = new URLResolver()

        resolver.with {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }

        resolver
    })

    repositories {
        add gitHub()
    }

    dependencies {
        classpath 'bmuschko:gradle-gae-plugin:0.5.1'
        classpath 'bmuschko:gradle-gaelyk-plugin:0.1'
    }
}

repositories {
    mavenCentral()
    add gitHub()
}

configurations {
    functionalTestCompile {
        extendsFrom testCompile
    }
    functionalTestRuntime {
        extendsFrom functionalTestCompile, testRuntime
    }
}

sourceSets {
    main {
        output.classesDir = file('war/WEB-INF/classes')
    }
	functionalTest {
        groovy {
			srcDir file('src/functional/groovy')
		}
        compileClasspath = configurations.functionalTestCompile
        runtimeClasspath = output + configurations.functionalTestRuntime
    }
}

dependencies {
    def gaeVersion = '1.6.5'
    groovy 'org.codehaus.groovy:groovy-all:1.8.1'
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion",
			"com.google.appengine:appengine-api-labs:$gaeVersion",
			'glaforge:gaelyk:1.1',
			"org.markdownj:markdownj:0.3.0-1.0.2b4",
			'org.codehaus.groovy.modules.remote:remote-transport-http:0.3'

    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8', {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'musketyr:gaelyk-spock:0.3',
			"com.google.appengine:appengine-api-stubs:$gaeVersion",
			"com.google.appengine:appengine-testing:$gaeVersion",
			'javax.servlet:servlet-api:2.5',
			'cglib:cglib-nodep:2.2',
			'org.objenesis:objenesis:1.2'
	functionalTestCompile 'org.codehaus.geb:geb-spock:0.7.0',
			'org.seleniumhq.selenium:selenium-firefox-driver:2.20.0'
    gaeSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"
}

webAppDirName = file('war')

gae {
    warDir = file('war')
    downloadSdk = true
}

clean.doLast {
	ant.delete dir: sourceSets.main.output.classesDir
}

task copyRuntimeLibraries {
    def webAppLibDirName = 'war/WEB-INF/lib'
    description = "Copies runtime libraries to $webAppLibDirName."

    copy {
        into webAppLibDirName
        from configurations.runtime.files
    }
}

idea{
	project {
		jdkName = compatibilityVersion

		ipr {
			withXml { provider ->
				def node = provider.asNode()

				// Set Gradle home
				def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
				gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
			}
		}
	}
	module {
		scopes.TEST.plus += configurations.functionalTestCompile
		scopes.TEST.plus += configurations.functionalTestRuntime
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-rc-3'
	distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
}

task functionalTest(type: Test, dependsOn: gaeRun) {
	testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check.dependsOn functionalTest

gaeRun.dependsOn compileGroovy

gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.hasTask(functionalTest)) {
		gae {
			daemon = true
		}
	}
}
